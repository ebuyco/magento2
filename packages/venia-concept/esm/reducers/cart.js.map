{"version":3,"sources":["../../src/reducers/cart.js"],"names":["handleActions","actions","checkoutActions","name","initialState","addItemError","cartId","details","detailsError","isLoading","isOptionsDrawerOpen","isUpdatingItem","isAddingItem","paymentMethods","removeItemError","shippingMethods","totals","updateItemError","reducerMap","getCart","receive","state","payload","error","String","getDetails","request","addItem","updateItem","removeItem","cartItemCount","openOptionsDrawer","closeOptionsDrawer","order","accept","reset"],"mappings":"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","sourcesContent":["import { handleActions } from 'redux-actions';\n\nimport actions from 'src/actions/cart';\nimport checkoutActions from 'src/actions/checkout';\n\nexport const name = 'cart';\n\nexport const initialState = {\n    addItemError: null,\n    cartId: null,\n    details: {},\n    detailsError: null,\n    isLoading: false,\n    isOptionsDrawerOpen: false,\n    isUpdatingItem: false,\n    isAddingItem: false,\n    paymentMethods: [],\n    removeItemError: null,\n    shippingMethods: [],\n    totals: {},\n    updateItemError: null\n};\n\nconst reducerMap = {\n    [actions.getCart.receive]: (state, { payload, error }) => {\n        if (error) {\n            return initialState;\n        }\n\n        return {\n            ...state,\n            cartId: String(payload)\n        };\n    },\n    [actions.getDetails.request]: (state, { payload }) => {\n        return {\n            ...state,\n            cartId: String(payload),\n            isLoading: true\n        };\n    },\n    [actions.getDetails.receive]: (state, { payload, error }) => {\n        if (error) {\n            return {\n                ...state,\n                detailsError: payload,\n                cartId: null,\n                isLoading: false\n            };\n        }\n\n        return {\n            ...state,\n            ...payload,\n            isLoading: false\n        };\n    },\n    [actions.addItem.request]: state => {\n        return {\n            ...state,\n            isAddingItem: true\n        };\n    },\n    [actions.addItem.receive]: (state, { payload, error }) => {\n        if (error) {\n            return {\n                ...state,\n                addItemError: payload,\n                isAddingItem: false\n            };\n        }\n\n        return {\n            ...state,\n            isAddingItem: false\n        };\n    },\n    [actions.updateItem.request]: (state, { payload, error }) => {\n        if (error) {\n            return initialState;\n        }\n        return {\n            ...state,\n            ...payload,\n            isUpdatingItem: true\n        };\n    },\n    [actions.updateItem.receive]: (state, { payload, error }) => {\n        if (error) {\n            return {\n                ...state,\n                isUpdatingItem: false,\n                updateItemError: payload\n            };\n        }\n\n        // We don't actually have to update any items here\n        // because we force a refresh from the server.\n        return {\n            ...state,\n            isUpdatingItem: false\n        };\n    },\n    [actions.removeItem.receive]: (state, { payload, error }) => {\n        if (error) {\n            return {\n                ...initialState,\n                removeItemError: payload\n            };\n        }\n        // If we are emptying the cart, perform a reset to prevent\n        // a bug where the next item added to cart would have a price of 0\n        if (payload.cartItemCount == 1) {\n            return initialState;\n        }\n        return {\n            ...state,\n            ...payload\n        };\n    },\n    [actions.openOptionsDrawer]: state => {\n        return {\n            ...state,\n            isOptionsDrawerOpen: true\n        };\n    },\n    [actions.closeOptionsDrawer]: state => {\n        return {\n            ...state,\n            isOptionsDrawerOpen: false\n        };\n    },\n    [checkoutActions.order.accept]: () => {\n        return initialState;\n    },\n    [actions.reset]: () => initialState\n};\n\nexport default handleActions(reducerMap, initialState);\n"],"file":"cart.js"}