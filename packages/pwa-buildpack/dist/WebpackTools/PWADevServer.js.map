{"version":3,"sources":["../../src/WebpackTools/PWADevServer.js"],"names":["require","config","debug","makeFileLogger","__filename","debugErrorMiddleware","express","default","playgroundMiddleware","url","optionsValidator","chalk","configureHost","portscanner","readdir","readdirAsync","readFile","readFileAsync","promisify","resolve","relative","boxen","addImgOptMiddleware","secureHostWarning","redBright","whiteBright","helpText","PWADevServer","validateConfig","publicPath","env","configure","devServerConfig","public","process","PWA_STUDIO_PUBLIC_PATH","contentBase","compress","hot","watchOptions","poll","parseInt","PWA_STUDIO_HOT_RELOAD_WITH_POLLING","host","port","PWA_STUDIO_PORTS_DEVELOPMENT","findAPortNotInUse","stats","all","NODE_DEBUG","undefined","builtAt","colors","errors","errorDetails","moduleTrace","timings","version","warnings","after","app","server","use","readyNotice","green","greenBright","underline","graphqlPlayground","blueBright","URL","middleware","waitUntilValid","console","log","borderColor","float","align","margin","padding","before","id","provideSecureHost","hostConf","desiredDomain","DEV_DOMAIN","warn","errorMsg","yellowBright","addUniqueHash","subdomain","Object","assign","Error","hostname","ports","ssl","https","spdy","protocols","requestedPort","development","checkPortStatus","queryDirs","endpoint","queryDirListings","Promise","map","dir","files","queryDirContents","queryFile","fileAbsPath","query","name","cwd","tabs","concat","oldBefore","noop","get","req","res","format","protocol","pathname","replace","module","exports"],"mappings":"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","sourcesContent":["require('dotenv').config();\nconst debug = require('../util/debug').makeFileLogger(__filename);\nconst debugErrorMiddleware = require('debug-error-middleware').express;\nconst {\n    default: playgroundMiddleware\n} = require('graphql-playground-middleware-express');\nconst url = require('url');\nconst optionsValidator = require('../util/options-validator');\nconst chalk = require('chalk');\nconst configureHost = require('../Utilities/configureHost');\nconst portscanner = require('portscanner');\nconst { readdir: readdirAsync, readFile: readFileAsync } = require('fs');\nconst { promisify } = require('util');\nconst readdir = promisify(readdirAsync);\nconst readFile = promisify(readFileAsync);\nconst { resolve, relative } = require('path');\nconst boxen = require('boxen');\nconst addImgOptMiddleware = require('../Utilities/addImgOptMiddleware');\n\nconst secureHostWarning = chalk.redBright(`\n    To enable all PWA features and avoid ServiceWorker collisions, PWA Studio\n    highly recommends using the ${chalk.whiteBright(\n        '\"provideSecureHost\"'\n    )} configuration\n    option of PWADevServer. \n`);\n\nconst helpText = `\n    To autogenerate a unique host based on project name\n    and location on disk, simply add:\n    ${chalk.whiteBright('provideSecureHost: true')}\n    to PWADevServer configuration options.\n\n    More options for this feature are described in documentation.\n`;\n\nconst PWADevServer = {\n    validateConfig: optionsValidator('PWADevServer', {\n        publicPath: 'string',\n        env: 'object'\n    }),\n    async configure(config) {\n        debug('configure() invoked', config);\n        PWADevServer.validateConfig('.configure(config)', config);\n        const devServerConfig = {\n            public: process.env.PWA_STUDIO_PUBLIC_PATH || '',\n            contentBase: false, // UpwardPlugin serves static files\n            compress: true,\n            hot: true,\n            watchOptions: {\n                // polling is CPU intensive - provide the option to turn it on if needed\n                poll:\n                    !!parseInt(\n                        process.env.PWA_STUDIO_HOT_RELOAD_WITH_POLLING\n                    ) || false\n            },\n            host: '0.0.0.0',\n            port:\n                process.env.PWA_STUDIO_PORTS_DEVELOPMENT ||\n                (await portscanner.findAPortNotInUse(10000)),\n            stats: {\n                all: !process.env.NODE_DEBUG ? false : undefined,\n                builtAt: true,\n                colors: true,\n                errors: true,\n                errorDetails: true,\n                moduleTrace: true,\n                timings: true,\n                version: true,\n                warnings: true\n            },\n            after(app, server) {\n                app.use(debugErrorMiddleware());\n                let readyNotice = chalk.green(\n                    `PWADevServer ready at ${chalk.greenBright.underline(\n                        devServerConfig.publicPath\n                    )}`\n                );\n                if (config.graphqlPlayground) {\n                    readyNotice +=\n                        '\\n' +\n                        chalk.blueBright(\n                            `GraphQL Playground ready at ${chalk.blueBright.underline(\n                                new url.URL(\n                                    '/graphiql',\n                                    devServerConfig.publicPath\n                                )\n                            )}`\n                        );\n                }\n                server.middleware.waitUntilValid(() =>\n                    console.log(\n                        boxen(readyNotice, {\n                            borderColor: 'gray',\n                            float: 'center',\n                            align: 'center',\n                            margin: 1,\n                            padding: 1\n                        })\n                    )\n                );\n            },\n            before(app) {\n                addImgOptMiddleware(app, config.env);\n            }\n        };\n        const { id, provideSecureHost } = config;\n        if (id || provideSecureHost) {\n            const hostConf = {};\n            // backwards compatibility\n            if (id) {\n                const desiredDomain = id + '.' + configureHost.DEV_DOMAIN;\n                console.warn(\n                    debug.errorMsg(\n                        chalk.yellowBright(`\nThe 'id' configuration option is deprecated and will be removed in upcoming\nreleases. It has been replaced by 'provideSecureHost' configuration which can\nbe configured to have the same effect as 'id'.\n\n  To create the subdomain ${desiredDomain}, use:\n    ${chalk.whiteBright(\n        `provideSecureHost: { subdomain: \"${id}\", addUniqueHash: false }`\n    )}\n\n  To omit the default ${\n      configureHost.DEV_DOMAIN\n  } and specify a full alternate domain, use:\n    ${chalk.whiteBright(\n        `provideSecureHost: { exactDomain: \"${id}.example.dev\" }`\n    )}\n  (or any other top-level domain).\n\n  ${helpText}`)\n                    )\n                );\n\n                hostConf.addUniqueHash = false;\n                hostConf.subdomain = id;\n            } else if (provideSecureHost === true) {\n                hostConf.addUniqueHash = true;\n            } else if (typeof provideSecureHost === 'object') {\n                Object.assign(hostConf, provideSecureHost);\n            } else {\n                throw new Error(\n                    debug.errorMsg(\n                        `Unrecognized argument to 'provideSecureHost'. Must be a boolean or an object with 'addUniqueHash', 'subdomain', and/or 'domain' properties.`\n                    )\n                );\n            }\n            const { hostname, ports, ssl } = await configureHost(hostConf);\n\n            devServerConfig.host = hostname;\n            devServerConfig.https = ssl;\n            // workaround for https://github.com/webpack/webpack-dev-server/issues/1491\n            devServerConfig.https.spdy = {\n                protocols: ['http/1.1']\n            };\n\n            const requestedPort =\n                process.env.PWA_STUDIO_PORTS_DEVELOPMENT || ports.development;\n            if (\n                (await portscanner.checkPortStatus(requestedPort)) === 'closed'\n            ) {\n                devServerConfig.port = requestedPort;\n            } else {\n                console.warn(\n                    chalk.yellowBright(\n                        '\\n' +\n                            debug.errorMsg(\n                                `This project's dev server is configured to run at ${hostname}:${requestedPort}, but port ${requestedPort} is in use. The dev server will run temporarily on port ${chalk.underline.whiteBright(\n                                    devServerConfig.port\n                                )}; you may see inconsistent ServiceWorker behavior.`\n                            ) +\n                            '\\n'\n                    )\n                );\n            }\n        } else {\n            console.warn(secureHostWarning + helpText);\n        }\n\n        const { graphqlPlayground } = config;\n        if (graphqlPlayground) {\n            const { queryDirs = [] } = config.graphqlPlayground;\n            const endpoint = '/graphql';\n\n            const queryDirListings = await Promise.all(\n                queryDirs.map(async dir => {\n                    const files = await readdir(dir);\n                    return { dir, files };\n                })\n            );\n\n            const queryDirContents = await Promise.all(\n                queryDirListings.map(({ dir, files }) =>\n                    Promise.all(\n                        files.map(async queryFile => {\n                            const fileAbsPath = resolve(dir, queryFile);\n                            const query = await readFile(fileAbsPath, 'utf8');\n                            const name = relative(process.cwd(), fileAbsPath);\n                            return {\n                                endpoint,\n                                name,\n                                query\n                            };\n                        })\n                    )\n                )\n            );\n            const tabs = [].concat(...queryDirContents); // flatten\n\n            const oldBefore = devServerConfig.before;\n            devServerConfig.before = app => {\n                oldBefore(app);\n                // this middleware has a bad habit of calling next() when it\n                // should not, so let's give it a noop next()\n                const noop = () => {};\n                const middleware = playgroundMiddleware({\n                    endpoint,\n                    tabs\n                });\n                app.get('/graphiql', (req, res) => middleware(req, res, noop));\n            };\n        }\n\n        // Public path must be an absolute URL to enable hot module replacement\n        // If public key is set, then publicPath should equal the public key value - supports proxying https://bit.ly/2EOBVYL\n        devServerConfig.publicPath = devServerConfig.public\n            ? `https://${devServerConfig.public}/`\n            : url.format({\n                  protocol: devServerConfig.https ? 'https:' : 'http:',\n                  hostname: devServerConfig.host,\n                  port: devServerConfig.port,\n                  // ensure trailing slash\n                  pathname: config.publicPath.replace(/([^\\/])$/, '$1/')\n              });\n        return devServerConfig;\n    }\n};\nmodule.exports = PWADevServer;\n"],"file":"PWADevServer.js"}